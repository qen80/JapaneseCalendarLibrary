name: Publish NuGet Package to GitHub Packages

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: 'src/JapaneseCalendarLibrary/JapaneseCalendarLibrary.csproj'
  TEST_PROJECT_PATH: 'tests/JapaneseCalendarLibrary.Tests/JapaneseCalendarLibrary.Tests.csproj'

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore JapaneseCalendarLibrary.sln
      
    - name: Build solution
      run: dotnet build JapaneseCalendarLibrary.sln --configuration Release --no-restore
      
    - name: Run tests
      run: dotnet test ${{ env.TEST_PROJECT_PATH }} --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          **/*.trx
          **/*.coverage
          **/coverage.cobertura.xml

  publish:
    runs-on: ubuntu-latest
    needs: test
    name: Build and Publish NuGet Package
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # GitVersionやSourceLinkに必要
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Set package version
      run: |
        if [ "${{ github.event_name }}" == "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
          # Remove 'v' prefix if present
          VERSION=${VERSION#v}
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
        echo "Package version set to: $VERSION"
        
    - name: Restore dependencies
      run: dotnet restore JapaneseCalendarLibrary.sln
      
    - name: Build project
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore -p:Version=${{ env.PACKAGE_VERSION }}
      
    - name: Create NuGet package
      run: dotnet pack ${{ env.PROJECT_PATH }} --configuration Release --no-build -p:Version=${{ env.PACKAGE_VERSION }} --output ./nupkg
      
    - name: List generated packages
      run: ls -la ./nupkg/
      
    - name: Publish to GitHub Packages
      run: |
        dotnet nuget sources --configfile ./nuget.config || true
        dotnet nuget remove source github-packages --configfile ./nuget.config || true
        dotnet nuget remove source github --configfile ./nuget.config || true
        dotnet nuget add source --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github-packages "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" --configfile ./nuget.config
        dotnet nuget push "./nupkg/*.nupkg" --source "github-packages" --api-key ${{ secrets.GITHUB_TOKEN }} --skip-duplicate
        
    - name: Upload NuGet packages as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./nupkg/*.nupkg
        retention-days: 90
        
    - name: Create release notes
      if: github.event_name == 'release'
      run: |
        echo "## NuGet Package Information" >> release-notes.md
        echo "" >> release-notes.md
        echo "**Package ID**: JapaneseCalendarLibrary" >> release-notes.md
        echo "**Version**: ${{ env.PACKAGE_VERSION }}" >> release-notes.md
        echo "**Published to**: GitHub Packages" >> release-notes.md
        echo "" >> release-notes.md
        echo "### Installation" >> release-notes.md
        echo "\`\`\`" >> release-notes.md
        echo "dotnet add package JapaneseCalendarLibrary --version ${{ env.PACKAGE_VERSION }}" >> release-notes.md
        echo "\`\`\`" >> release-notes.md
        echo "" >> release-notes.md
        echo "### GitHub Packages Setup" >> release-notes.md
        echo "NuGet.configファイルに以下を追加してください：" >> release-notes.md
        echo "\`\`\`xml" >> release-notes.md
        echo "<packageSources>" >> release-notes.md
        echo "  <add key=\"github\" value=\"https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json\" />" >> release-notes.md
        echo "</packageSources>" >> release-notes.md
        echo "\`\`\`" >> release-notes.md
        
    - name: Upload release notes
      if: github.event_name == 'release'
      uses: actions/upload-artifact@v4
      with:
        name: release-notes
        path: release-notes.md